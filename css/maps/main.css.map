{"version":3,"sources":["base/_images.scss","base/_page.scss","abstracts/_mixins.scss","abstracts/_variables.scss","base/_typography.scss","layout/_container.scss","vendors/_includemedia.scss","layout/_header.scss","components/_article.scss","components/_gridlist.scss","components/_lightbox.scss","components/_menu.scss","components/_taglist.scss"],"names":[],"mappings":"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","file":"../main.css","sourcesContent":["img {\r\n  vertical-align: bottom;\r\n}\r\n\r\nimg.circle {\r\n  border-radius: 50%;\r\n}\r\n\r\n.images {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n}\r\n\r\n.images * {\r\n  flex: 1;\r\n}","// -----------------------------------------------------------------------------\r\n// This file contains the generic page style\r\n// -----------------------------------------------------------------------------\r\n\r\n\r\n/**\r\n * Set up a decent box model on the root element\r\n */\r\nhtml {\r\n  box-sizing: border-box;\r\n  min-width: 100%;\r\n  height: 100%;\r\n\r\n}\r\n\r\n/**\r\n * Make all elements from the DOM inherit from the parent box-sizing\r\n * Since `*` has a specificity of 0, it does not override the `html` value\r\n * making all elements inheriting from the root box-sizing value\r\n * See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/\r\n */\r\n*, *::before, *::after {\r\n  box-sizing: inherit;\r\n  padding: 0;\r\n  margin: 0;\r\n} \r\n\r\nbody {\r\n  @include linear-gradient(45deg, $color-primary, $color-secondary);\r\n  background-attachment: fixed;\r\n  background-size: cover;\r\n}\r\n\r\n// prevent scaling on mobile\r\nimg { \r\n  max-width: 100%; \r\n}\r\n\r\n.component {\r\n  margin: $content-margin-vertical 0 0 0;\r\n  padding: $content-padding;\r\n  background-clip: border-box;\r\n  background-color: $color-white;\r\n}\r\n\r\n.component > * {\r\n  padding-bottom: $content-padding;\r\n}\r\n.component > *:last-child {\r\n  padding-bottom: 0;\r\n}\r\n\r\n.component > a {\r\n  display: block;\r\n}\r\n","// -----------------------------------------------------------------------------\r\n// This file contains all application-wide Sass mixins.\r\n// -----------------------------------------------------------------------------\r\n\r\n/// Mixin printing a linear-gradient \r\n/// as well as a plain color fallback \r\n/// and the `-webkit-` prefixed declaration\r\n/// @access public\r\n/// @param {String | List | Angle} $direction - Linear gradient direction\r\n/// @param {Arglist} $color-stops - List of color-stops composing the gradient\r\n@mixin linear-gradient($direction, $color-stops...) {\r\n  @if is-direction($direction) == false {\r\n    $color-stops: ($direction, $color-stops);\r\n    $direction: 180deg;\r\n  }\r\n  \r\n  background: nth(nth($color-stops, 1), 1);\r\n  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);\r\n  background: linear-gradient($direction, $color-stops);\r\n}","// -----------------------------------------------------------------------------\r\n// This file contains all application-wide Sass functions.\r\n// -----------------------------------------------------------------------------\r\n\r\n$font-heading: 'Source Code Pro', monospace;\r\n$font-default: 'Open Sans', sans-serif;\r\n$font-size: 1.2em;\r\n$font-weight: 200;\r\n\r\n$color-primary: #1A237E;\r\n$color-primary-light: #9EA8DB;\r\n$color-secondary: #FF7000;\r\n$color-white: #E8EAF6;\r\n$color-black: #0B0F33;\r\n\r\n// before every first element and after all elements\r\n$content-padding: 10px;\r\n$content-margin-vertical: 40px;\r\n\r\n$breakpoints: (\r\n  'phone': 768px,\r\n  'tablet': 1024px,\r\n  'desktop': 1224px\r\n)\r\n\r\n","// -----------------------------------------------------------------------------\r\n// This file contains the default typography styling\r\n// -----------------------------------------------------------------------------\r\n\r\nbody {\r\n  color: $color-black;\r\n  font-family: $font-default;\r\n  font-size: $font-size;\r\n  font-family: $font-default;\r\n  font-weight: $font-weight;\r\n  line-height: 1.6;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6, p {\r\n  font-weight: $font-weight;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  color: $color-primary;\r\n  font-family: $font-heading;\r\n  display: inline-block;\r\n}\r\n\r\nh1, h2 { line-height: 1.1; }\r\nh3, h4 { line-height: 1.3; }\r\nh1 { font-size: 200%; }\r\nh2 { font-size: 180%; }\r\nh3 { font-size: 150%; }\r\nh4 { font-size: 130%; }\r\nh5 { font-size: 120%; }\r\nh6 { font-size: 100%; }\r\n\r\n/**\r\n * Basic styles for links\r\n */\r\na {\r\n  color: $color-secondary;\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\n","main {\r\n  margin-top: $content-margin-vertical;\r\n  margin-bottom: $content-margin-vertical;\r\n  padding: 0 10%;\r\n\t@include media('<tablet') {\r\n    padding: 0 5%;\r\n  }\r\n}\r\n","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//                http://include-media.com\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n","header {\r\n  display: flex;\r\n  padding: 0 10%;\r\n\tflex-wrap: wrap;\r\n  @include media('<tablet') {\r\n    padding: 0 5%;\r\n  }\r\n  margin-bottom: $content-margin-vertical;\r\n}\r\n\r\nheader .small {\r\n  flex: 1;\r\n  @include media('<tablet') {\r\n    display: none;\r\n  }\r\n}\r\n\r\nheader .medium {\r\n  flex: 2;\r\n}\r\n\r\nheader .big{\r\n  flex: 3;\r\n}\r\n\r\nheader > :nth-child(even) {\r\n  padding-left: 10%;\r\n}\r\n\r\nheader .taglist li{\r\n  margin-right: $content-margin-vertical;\r\n}\r\n\r\n.main-menu {\r\n  background: $color-white;\r\n  width: 100%;\r\n  color: $color-secondary;\r\n  text-align: center;\r\n  box-shadow: 0 0 7px $color-black;\r\n  margin-bottom: $content-margin-vertical;\r\n}\r\n\r\n .main-menu > * {\r\n  background: transparent;\r\n  margin-top: 0;\r\n  margin-left: ($content-margin-vertical/4);\r\n  margin-right: ($content-margin-vertical/4);\r\n  padding: 15px;\r\n  display: inline-block;\r\n  text-transform: uppercase;\r\n  font-size: 120%;\r\n}","article > p {\r\n  padding: $content-padding;\r\n}",".gridlist {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n}\r\n\r\n.gridlist-item {\r\n  width: 30%;\r\n  @include media('<desktop') {\r\n    width: 45%;\r\n  }\r\n  @include media('<phone') {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n",".lightbox-container {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 100%;\r\n  position: fixed;\r\n  z-index: 100;\r\n  background: rgba(0,0,0,0.7);\r\n  top: 0;\r\n  left: 0;\r\n  padding: 20px;\r\n  display: none;\r\n}\r\n\r\n.lightbox-content {\r\n    background-size: contain;\r\n    background-position: center;\r\n    background-repeat: no-repeat;\r\n    width: 100%;\r\n    height: 90%;\r\n}\r\n\r\n.lightbox-container .lightbox-close {\r\n  font-size: 48px;\r\n  margin-top: -20px;\r\n  float: right;\r\n}\r\n\r\nbody.lightbox-active .lightbox-container {\r\n  display: block;\r\n}\r\n\r\n\r\n.icon {\r\n  display: inline-block;\r\n  width: 1em;\r\n  height: 1em;\r\n  stroke-width: 0;\r\n  stroke: currentColor;\r\n  fill: currentColor;\r\n}","\r\n\r\nnav.menu {\r\n  list-style: none;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\nnav.menu > * {\r\n  text-transform: uppercase;\r\n}",".taglist {\r\n  list-style: none;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.taglist li {\r\n  background-color: $color-white;\r\n  background-clip: border-box;\r\n  font-weight: $font-weight;\r\n  text-transform: uppercase;\r\n}"]}